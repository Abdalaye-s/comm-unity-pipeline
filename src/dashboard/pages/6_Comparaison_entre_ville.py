# comparaison.py ‚Äì Comparaison entre entit√©s (villes ou entreprises)
import os
import sys
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#  Config de page
st.set_page_config(page_title="Comm'Unity ‚Äì Comparaison", layout="wide")

#  R√©glage des chemins
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.abspath(os.path.join(CURRENT_DIR, "../../")))

#  Initialisation session
if "selected_entities" not in st.session_state:
    st.session_state.selected_entities = []

#  Titre
st.title(" Comparaison entre entit√©s")
st.markdown("Comparez les ressentis entre plusieurs **villes** ou **entreprises** charg√©es dans l‚Äôonglet Accueil.")

#  V√©rification des donn√©es
if "df" not in st.session_state or st.session_state["df"].empty:
    st.warning("Aucune donn√©e disponible. Veuillez d'abord effectuer une recherche dans l'onglet Accueil.")
    st.stop()

df = st.session_state["df"]
df.columns = df.columns.str.strip().str.lower()

#  D√©tection intelligente de l'identifiant
if "ville" in df.columns:
    identifiant_col = "ville"
elif "entite" in df.columns:
    identifiant_col = "entite"
elif "thematic_query" in df.columns:
    identifiant_col = "thematic_query"
else:
    st.error("Aucune colonne identifiable pour la comparaison ('ville', 'entite', 'thematic_query').")
    st.stop()

#  Filtrage par type d‚Äôentit√©
with st.sidebar:
    st.markdown("## üîç Filtres")
    if "type_entite" in df.columns:
        type_selection = st.selectbox("Type d'entit√© :", ["Tous", "ville", "entreprise"])
        if type_selection != "Tous":
            df = df[df["type_entite"] == type_selection]

    #  S√©lection des entit√©s disponibles
    entities_available = sorted(df[identifiant_col].dropna().unique().tolist())
    selected = st.multiselect(
        "S√©lectionnez les entit√©s √† comparer :",
        options=entities_available,
        default=st.session_state.selected_entities
    )

    if selected != st.session_state.selected_entities:
        st.session_state.selected_entities = selected

#  V√©rification s√©lection
if not selected:
    st.info("Veuillez s√©lectionner au moins une entit√©.")
    st.stop()

#  Donn√©es filtr√©es
df_filtr√© = df[df[identifiant_col].isin(selected)]

#  Sentiments
if "sentiment" in df.columns:
    st.markdown("### üìà R√©partition des sentiments par entit√©")
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.countplot(data=df_filtr√©, x=identifiant_col, hue="sentiment", palette="Set2", ax=ax)
    ax.set_xlabel("Entit√©")
    ax.set_ylabel("Nombre de commentaires")
    plt.xticks(rotation=45)
    st.pyplot(fig)
else:
    st.warning("La colonne 'sentiment' est absente des donn√©es.")

#  Th√©matiques
theme_col = "thematic_query" if "thematic_query" in df.columns else "theme" if "theme" in df.columns else None

if theme_col:
    st.markdown("### R√©partition des th√©matiques")
    theme_df = df_filtr√©.groupby([identifiant_col, theme_col]).size().reset_index(name="Nombre")
    fig2, ax2 = plt.subplots(figsize=(10, 6))
    sns.barplot(data=theme_df, x="Nombre", y=theme_col, hue=identifiant_col, ax=ax2)
    plt.title("Th√©matiques dominantes par entit√©")
    st.pyplot(fig2)
else:
    st.info("Aucune colonne de th√©matique disponible pour cette comparaison.")

#  Export CSV
st.markdown("### üíæ Export des donn√©es")
csv_data = df_filtr√©.to_csv(index=False).encode("utf-8")
st.download_button("‚¨áÔ∏è T√©l√©charger les donn√©es filtr√©es", data=csv_data, file_name="comparaison.csv", mime="text/csv")

